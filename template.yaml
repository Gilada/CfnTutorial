
Description: 'Hello World Lambda'

Parameters:

  Env:
    Type: String
    Default: ""
    MaxLength: 10

  FunctionName:
    Type: String

  BucketUrl:
    Type: String

  Account:
    Type: String

Mappings:
  AccountToLambdaMapping:
    timeout:
      preprod: 23
      prod: 60

Conditions:
  CreateS3Bucket: !Equals [!Ref Account, "prod"]

Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:  !Sub "${Env}CfnDemoRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ''
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: "PutMetricToCloudwatch"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                Resource: "*"

  Lamda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub
        - "${Environment}${Name}Lambda"
        - Environment: !Ref Env
          Name: !Ref FunctionName
      Runtime: "python3.6"
      Handler: "index.handler"
      Role: !GetAtt LambdaRole.Arn
      Timeout: !FindInMap [AccountToLambdaMapping, "timeout", !Ref Account]
      Code:
        ZipFile: |
          def handler(event, context):
              print("Hello Bros!")

  NestedS3Stack:
    Type: AWS::CloudFormation::Stack # <---------- condition on resource creation. This resource will be removed from cfn.
    Condition: CreateS3Bucket
    Properties:
      Parameters:
        Env: !Ref Env
      TemplateURL: !Ref BucketUrl

Outputs:

   LambdaRoleArn:
    Value: !GetAtt LambdaRole.Arn
    Export:
      Name: !Sub "${Env}-demo-cfn-lambda-role-arn"
